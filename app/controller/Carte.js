/*
 * File: app/controller/Carte.js
 *
 * This file was generated by Sencha Architect version 2.0.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.Carte', {
    extend: 'Ext.app.Controller',
    config: {
        control: {
            "#btn-ajouteractivite": {
                tap: 'ajouterActivite'
            },
            "#btn-annulermarker": {
                tap: 'annulerMarker'
            },
            "#btn-validermarker": {
                tap: 'validerMarker'
            },
            "#carte": {
                initialize: 'initialiserCarte'
            },
            "#panel-menumarker": {
                hide: 'onPanelHide'
            },
            "#btn-annuleretape": {
                tap: 'retourPrecedent'
            },
            "#btn-enregistrergeoloc": {
                tap: 'enregistrerGeoloc'
            },
            "#list-etapes": {
                select: 'afficherDetailsEtape'
            },
            "#list-choixtypeactivite": {
                select: 'choisirTypeActivite'
            },
            "#textfield-ajouterreponse": {
                focus: 'ajouterReponse'
            },
            "#list-reponseqcm": {
                select: 'afficherDetailsReponse',
                itemswipe: 'supprimerReponse'
            },
            "#list-activites": {
                select: 'afficherDetailsActivite'
            },
            "#panel-circuits": {
                activeitemchange: 'changerButton'
            },
            "#list-detailsreponsesqcm": {
                select: 'modifierReponse'
            }
        }
    },

    ajouterActivite: function(button, e, options) {
        if(Ext.getCmp('selectfield-typeactivite').getValue()=='1'){

            Ext.Ajax.request({
                url: 'proxy.php?proxy_url=manager.php',
                params: {
                    nom:'',
                    question:'',
                    reponse:'',
                    points:'',
                    indice:'',
                    malus:''
                },
                success: function(response){
                }
            });
        }

        else if(Ext.getCmp('selectfield-typeactivite').getValue()=='2'){


            Ext.Ajax.request({
                url: 'proxy.php?proxy_url=manager.php',
                params: {
                    nom:'',
                    question:'',
                    reponse:''
                },
                success: function(response){
                }
            });
        }

        else if(Ext.getCmp('selectfield-typeactivite').getValue()=='3'){

            Ext.Ajax.request({
                url: 'proxy.php?proxy_url=manager.php',
                params: {
                    nom:'',
                    points :''
                },
                success: function(response){
                    Ext.getCmp('list-circuits').getStore().load();
                }
            });
        }
    },

    annulerMarker: function(button, e, options) {
        // Annuler la création d'une étape
        Ext.getCmp('panel-menumarker').marker.setMap(null);
        Ext.getCmp('panel-menumarker').hide();
    },

    validerMarker: function(button, e, options) {
        var me = this;
        var etape_nom = Ext.getCmp('textfield-nommarker').getValue();

        // Validation
        if (etape_nom === '') return;

        var circuitController = this.getApplication().getController('Circuit');
        var circuit_id = Ext.getCmp('list-circuits').getSelection()[0].get('id');

        // Ajouter l'étape au circuit
        Ext.Ajax.request({
            url: 'proxy.php?proxy_url=manager.php',
            params: {
                circuit_id: circuit_id,
                etape_nom: etape_nom,
                lng: Ext.getCmp('panel-menumarker').marker.getPosition().lng(),
                lat: Ext.getCmp('panel-menumarker').marker.getPosition().lat(),
                ordre: Ext.getStore('Etapes').getCount() + 1,
                fn : 'ajouterEtape'
            },
            success: function(response){
                // Cacher le panel-menumarker
                Ext.getCmp('panel-menumarker').hide();

                // Recharger les étapes du circuit
                Ext.getStore('Etapes').load({
                    params:{
                        fn: 'fetchEtapes',
                        circuit_id: circuit_id
                    },
                    callback:function(){
                        me.effacerCircuit(Ext.getCmp('carte'));
                        Ext.getCmp('panel-menumarker').marker.setMap(null);
                        me.tracerCircuit(Ext.getStore('Etapes'), Ext.getCmp('carte'));
                    }
                });
            }
        });
    },

    initialiserCarte: function(component, options) {
        // Map settings
        Ext.getCmp('carte').setMapOptions({center: new google.maps.LatLng(34.002021, -6.84857),zoom: 9, disableDoubleClickZoom:true});

        google.maps.event.addListener(component.getMap(), 'zoom_changed', function(){
            if(component.getMap().getZoom() < 5) component.getMap().setZoom(5);
        });

        google.maps.event.addListener(component.getMap(), 'dblclick', function(latlng){ 
            me.creerMarker(latlng.latLng, component.getMap());
        });


        // Anti-POLISARIO
        var pointZone1 = [
        new google.maps.LatLng(27.677243269275678, -13.174809407062526),
        new google.maps.LatLng(27.657987280203496,-13.173980712890625),
        new google.maps.LatLng(27.567910340104493,-8.711985762782092),
        new google.maps.LatLng(28.016798626662702,-8.711298446722026)
        ];

        var pointZone2 = [
        new google.maps.LatLng(25.118966907622724,-14.625004719562526),
        new google.maps.LatLng(23.648298159395424,-14.712066650390625),
        new google.maps.LatLng(24.027621634451247,-12.128733809657092),
        new google.maps.LatLng(25.32723530544295,-12.303827743597026)
        ];

        var zone1 = new google.maps.Polygon({
            options:{
                path: pointZone1,
                map: component.getMap(),
                strokeColor: 'F4F3F0',
                fillColor: 'F4F3F0',
                fillOpacity: '1.0',
                strokeWeight: '1'
            }
        });

        var zone2 = new google.maps.Polygon({
            options:{
                path: pointZone2,
                map: component.getMap(),
                strokeColor: 'F4F3F0',
                fillColor: 'F4F3F0',
                fillOpacity: '1.0',
                strokeWeight: '1'
            }
        });


    },

    onPanelHide: function(component, options) {
        if (Ext.getCmp('panel-menumarker').marker) Ext.getCmp('panel-menumarker').marker.setMap(null);
    },

    retourPrecedent: function(button, e, options) {
        var activitem = Ext.getCmp('panel-circuits').getActiveItem();

        if(activitem==Ext.getCmp('panel-modifierreponse')){

            Ext.getCmp('panel-circuits').setActiveItem(Ext.getCmp('panel-formqcm'));
        }

        else if(activitem==Ext.getCmp('panel-detailsactivite')){


            var activPanel = Ext.getCmp('panel-detailsactivite').getActiveItem();

            if(activPanel==Ext.getCmp('panel-detailsmodifierreponse')) Ext.getCmp('panel-detailsactivite').setActiveItem(Ext.getCmp('panel-detailsqcm'));

            else Ext.getCmp('panel-circuits').setActiveItem(Ext.getCmp('panel-detailsetape'));

            Ext.getCmp('panel-detailsactivite').setActiveItem(Ext.getCmp('panel-detailsqcm'));
        }

        else if(activitem==Ext.getCmp('panel-ajouterreponse')){

            Ext.getCmp('panel-circuits').setActiveItem(Ext.getCmp('panel-formqcm'));
        }

        else if(activitem==Ext.getCmp('panel-detailsetape')){

            Ext.getCmp('panel-circuits').setActiveItem(Ext.getCmp('list-etapes'));
        }

        else if(activitem==Ext.getCmp('panel-formqs') || activitem==Ext.getCmp('panel-formqcm') || activitem==Ext.getCmp('panel-formgeoloc')){

            Ext.getCmp('panel-circuits').setActiveItem(Ext.getCmp('panel-detailsetape'));
        }


        // Afficher le btn-annuleretape
        Ext.getCmp('btn-annuleretape').hide();
    },

    enregistrerGeoloc: function(button, e, options) {
        me=this;

        Ext.Ajax.request({
            url: 'proxy.php?proxy_url=manager.php',
            params: {
                fn:'ajouterGeoloc',
                nom:Ext.getCmp('textfield-nomactivitegeoloc').getValue(),
                lat:Ext.getCmp('list-etapes').getSelection()[0].get('lat'),
                lng:Ext.getCmp('list-etapes').getSelection()[0].get('lng'),
                points:Ext.getCmp('textfield-pointsgeoloc').getValue(),
                etape_id:Ext.getCmp('list-etapes').getSelection()[0].get('id'),
                type_id:Ext.getCmp('list-choixtypeactivite').getSelection()[0].get('id'),
                ordre:Ext.getStore('store-activites').getCount()+1
            },
            success: function(response){
                Ext.getCmp('panel-circuits').setActiveItem(Ext.getCmp('panel-detailsetape'));
                Ext.getStore('store-activites').load({
                    params:{
                        fn:'fetchActivites',
                        etape_id:Ext.getCmp('list-etapes').getSelection()[0].get('id')
                    },
                    callback:function(){
                    }
                });
            }
        });
    },

    afficherDetailsEtape: function(dataview, record, options) {
        // Afficher le btn-activiteitems
        Ext.getCmp('btn-activiteItems').show();

        // Afficher le btn-annuleretape
        Ext.getCmp('btn-annuleretape').show();

        Ext.getCmp('panel-circuits').setActiveItem(Ext.getCmp('panel-detailsetape'));

        Ext.getCmp('textfield-nometape').setValue(record.get('nom'));
        Ext.getCmp('textarea-descriptionetape').setValue(record.get('description'));


        Ext.getStore('store-activites').load({
            params:{
                fn:'fetchActivites',
                etape_id:record.get('id')
            },
            callback:function(){
            }
        });
    },

    choisirTypeActivite: function(dataview, record, options) {
        Ext.getCmp('panel-menuetape').hide();
        if(record.get('id')=='1'){
            Ext.getCmp('panel-circuits').setActiveItem(Ext.getCmp('panel-formqs'));
        }
        else if(record.get('id')=='2'){
            Ext.getCmp('panel-circuits').setActiveItem(Ext.getCmp('panel-formqcm'));
        }
        else if(record.get('id')=='3'){
            Ext.getCmp('panel-circuits').setActiveItem(Ext.getCmp('panel-formgeoloc'));
        }
    },

    ajouterReponse: function(textfield, e, options) {
        Ext.getCmp('panel-circuits').setActiveItem(Ext.getCmp('panel-ajouterreponse'));
        Ext.getCmp('textfield-reponseqcm').setValue('');
        Ext.getCmp('checkbox-reponsejuste').setChecked(false);

    },

    afficherDetailsReponse: function(dataview, record, options) {
        Ext.getCmp('textfield-modifierreponseqcm').setValue(record.get('reponse'));
        Ext.getCmp('checkbox-modifierreponsejuste').setChecked(record.get('juste')=='1');

        Ext.getCmp('panel-circuits').setActiveItem(Ext.getCmp('panel-modifierreponse'));
    },

    supprimerReponse: function(dataview, index, target, record, e, options) {

        if (e.direction == "left") {
            var del = Ext.create("Ext.Button", {
                ui: "decline",
                text: "Delete",
                style: "position:absolute;right:0.125in;",
                handler: function() {
                    record.stores[0].remove(record);
                }
            });
            var removeDeleteButton = function() {
                Ext.Anim.run(del, 'fade', {
                    after: function() {
                        del.destroy();
                    },
                    out: true
                });
            };
            del.renderTo(Ext.DomQuery.selectNode(".deleteplaceholder", target.dom));
            dataview.on({
                single: true,
                buffer: 250,
                itemtouchstart: removeDeleteButton
            });
            dataview.element.on({
                single: true,
                buffer: 250,
                touchstart: removeDeleteButton
            });
        }
    },

    afficherDetailsActivite: function(dataview, record, options) {
        me =this;
        type_question = record.get('type_id');

        if(type_question==1){

            Ext.getStore('QuestionsQs').load({
                params:{
                    fn:'fetchQuestionsQs',
                    activite_id:record.get('id')
                },
                callback:function(){

                    Ext.getCmp('textfield-detailsnomactiviteqs').setValue(record.get('nom'));
                    Ext.getCmp('textfield-detailsquestionqs').setValue(Ext.getStore('QuestionsQs').getAt(0).get('question'));
                    Ext.getCmp('textfield-detailsreponseqs').setValue(Ext.getStore('QuestionsQs').getAt(0).get('reponse'));
                    Ext.getCmp('textfield-detailspointsqs').setValue(Ext.getStore('QuestionsQs').getAt(0).get('points'));
                    Ext.getCmp('textfield-detailsindiceqs').setValue(Ext.getStore('QuestionsQs').getAt(0).get('indice'));
                    Ext.getCmp('textfield-detailsmalusqs').setValue(Ext.getStore('QuestionsQs').getAt(0).get('malus'));

                    Ext.getCmp('panel-circuits').setActiveItem(Ext.getCmp('panel-detailsactivite'));
                    Ext.getCmp('panel-detailsactivite').setActiveItem(Ext.getCmp('panel-detailsqs'));
                }
            });
        }

        else if (type_question==2){

            Ext.getStore('QuestionsQcm').load({
                params:{
                    fn:'fetchQuestionsQcm',
                    activite_id:record.get('id')
                },
                callback:function(){

                    Ext.getStore('ReponsesQcm').load({
                        params:{
                            fn:'fetchReponsesQcm',
                            question_id:Ext.getStore('QuestionsQcm').getAt(0).get('id')
                        }});

                        Ext.getCmp('textfield-detailsnomactiviteqcm').setValue(record.get('nom'));
                        Ext.getCmp('textfield-detailsquestionqcm').setValue(Ext.getStore('QuestionsQcm').getAt(0).get('question'));
                        Ext.getCmp('textfield-detailspointsqcm').setValue(Ext.getStore('QuestionsQcm').getAt(0).get('points'));
                        Ext.getCmp('textfield-detailsindiceqcm').setValue(Ext.getStore('QuestionsQcm').getAt(0).get('indice'));
                        Ext.getCmp('textfield-detailsmalusqcm').setValue(Ext.getStore('QuestionsQcm').getAt(0).get('malus'));

                        Ext.getCmp('panel-circuits').setActiveItem(Ext.getCmp('panel-detailsactivite'));
                        Ext.getCmp('panel-detailsactivite').setActiveItem(Ext.getCmp('panel-detailsqcm'));
                    }
                });
            }

            else if(type_question==3){
                Ext.getStore('QuestionsGeoloc').load({
                    params:{
                        fn:'fetchQuestionsGeoloc',
                        activite_id:record.get('id')
                    },
                    callback:function(){

                        Ext.getCmp('textfield-detailsnomactivitegeoloc').setValue(record.get('nom'));
                        Ext.getCmp('textfield-detailspointsgeoloc').setValue(Ext.getStore('QuestionsGeoloc').getAt(0).get('points'));

                        Ext.getCmp('panel-circuits').setActiveItem(Ext.getCmp('panel-detailsactivite'));
                        Ext.getCmp('panel-detailsactivite').setActiveItem(Ext.getCmp('panel-detailsgeoloc'));

                    }
                });
            }
    },

    changerButton: function(container, value, oldValue, options) {
        me=this;
        if(value==Ext.getCmp('panel-detailsactivite')){

            Ext.getCmp('btn-activiteItems').setText('Modifier');
            Ext.getCmp('btn-activiteItems').setUi('confirm');

            Ext.getCmp('btn-activiteItems').setHandler(function(){
                if(Ext.getCmp('btn-activiteItems').getText()=='OK'){

                    if(Ext.getCmp('textfield-detailsmodifierreponseqcm').getValue()!=''){

                        Ext.getCmp('list-detailsreponsesqcm').getSelection()[0].data.reponse=Ext.getCmp('textfield-detailsmodifierreponseqcm').getValue();
                        Ext.getCmp('list-detailsreponsesqcm').getSelection()[0].data.juste=(Ext.getCmp('checkbox-detailsmodifierreponsejuste').isChecked()?'1':'0');
                        Ext.getCmp('list-detailsreponsesqcm').refresh();

                    }

                    Ext.getCmp('panel-detailsactivite').setActiveItem(Ext.getCmp('panel-detailsqcm'));
                    Ext.getCmp('btn-activiteItems').setText('Enregistrer');
                }

                else if(Ext.getCmp('btn-activiteItems').getText()=='Enregistrer'){

                    if(Ext.getCmp('panel-detailsactivite').getActiveItem()==Ext.getCmp('panel-detailsqs')){}
                    else if(Ext.getCmp('panel-detailsactivite').getActiveItem()==Ext.getCmp('panel-detailsqcm')){

                        var tab =me.storeToJson(Ext.getStore('ReponsesQcm'));


                        Ext.Ajax.request({
                            url: 'proxy.php?proxy_url=manager.php',
                            params: {
                                fn:'updateQcm',
                                json:JSON.stringify(tab),
                                fiche_id:Ext.getCmp('list-activites').getSelection()[0].get('fiche_id'),
                                nom:Ext.getCmp('textfield-detailsnomactiviteqcm').getValue(),
                                question:Ext.getCmp('textfield-detailsquestionqcm').getValue(),
                                points:Ext.getCmp('textfield-detailspointsqcm').getValue(),
                                indice:Ext.getCmp('textfield-detailsindiceqcm').getValue(),
                                malus:Ext.getCmp('textfield-detailsmalusqcm').getValue(),
                                etape_id:Ext.getCmp('list-etapes').getSelection()[0].get('id'),
                                type_id:Ext.getCmp('list-activites').getSelection()[0].get('type_id'),
                                ordre:Ext.getCmp('list-activites').getSelection()[0].get('ordre')
                            },
                            success: function(response){
                                Ext.getCmp('panel-circuits').setActiveItem(Ext.getCmp('panel-detailsetape'));
                                Ext.getStore('store-activites').load({
                                    params:{
                                        fn:'fetchActivites',
                                        etape_id:Ext.getCmp('list-etapes').getSelection()[0].get('id')
                                    },
                                    callback:function(){
                                    }
                                });
                            }
                        });
                    }
                    else if(Ext.getCmp('panel-detailsactivite').getActiveItem()==Ext.getCmp('panel-detailsgeoloc')){}

                }
                else if(Ext.getCmp('btn-activiteItems').getText()=='Modifier'){

                    Ext.getCmp('btn-activiteItems').setText('Enregistrer');
                    me.setEditable(['textfield-detailsnomactiviteqcm','textfield-detailsquestionqcm','textfield-detailspointsqcm','textfield-detailsindiceqcm','textfield-detailsmalusqcm'],true);
                }


            });



        }

        if(value==Ext.getCmp('panel-modifierreponse')){

            Ext.getCmp('btn-activiteItems').setText('OK');
            Ext.getCmp('btn-activiteItems').setUi('confirm');

            Ext.getCmp('btn-activiteItems').setHandler(function(){

                if(Ext.getCmp('textfield-reponseqcm').getValue()!=''){

                    Ext.getCmp('list-reponseqcm').getSelection()[0].data.reponse=Ext.getCmp('textfield-modifierreponseqcm').getValue();
                    Ext.getCmp('list-reponseqcm').getSelection()[0].data.juste=(Ext.getCmp('checkbox-modifierreponsejuste').isChecked()?'0':'1');
                    Ext.getCmp('list-reponseqcm').refresh();
                }

                Ext.getCmp('panel-circuits').setActiveItem(Ext.getCmp('panel-formqcm'));

            });

        }

        if(value==Ext.getCmp('panel-ajouterreponse')){

            Ext.getCmp('btn-activiteItems').setText('OK');
            Ext.getCmp('btn-activiteItems').setUi('confirm');

            Ext.getCmp('btn-activiteItems').setHandler(function(){

                if(Ext.getCmp('textfield-reponseqcm').getValue()!=''){

                    var tab=[];
                    tab.push({id:"",id_act_question:"",reponse:Ext.getCmp('textfield-reponseqcm').getValue(),juste:(Ext.getCmp('checkbox-reponsejuste').isChecked()?'1':'0')});

                    Ext.getStore('ReponsesQcm').insert(0,tab);
                    Ext.getCmp('list-reponseqcm').refresh();

                }
                Ext.getCmp('panel-circuits').setActiveItem(Ext.getCmp('panel-formqcm'));


            });
        }

        if(value==Ext.getCmp('panel-formgeoloc')){

            Ext.getCmp('btn-activiteItems').setText('Enregistrer');
            Ext.getCmp('btn-activiteItems').setUi('confirm');

            Ext.getCmp('btn-activiteItems').setHandler(function(){
                Ext.Ajax.request({
                    url: 'proxy.php?proxy_url=manager.php',
                    params: {
                        fn:'ajouterGeoloc',
                        nom:Ext.getCmp('textfield-nomactivitegeoloc').getValue(),
                        lat:me.getListEtapes().getSelection()[0].get('lat'),
                        lng:me.getListEtapes().getSelection()[0].get('lng'),
                        points:Ext.getCmp('textfield-pointsgeoloc').getValue(),
                        etape_id:Ext.getCmp('list-etapes').getSelection()[0].get('id'),
                        type_id:Ext.getCmp('list-choixtypeactivite').getSelection()[0].get('id'),
                        ordre:Ext.getStore('store-activites').getCount()+1
                    },
                    success: function(response){
                        Ext.getCmp('panel-circuits').setActiveItem(Ext.getCmp('panel-detailsetape'));
                        Ext.getStore('store-activites').load({
                            params:{
                                fn:'fetchActivites',
                                etape_id:Ext.getCmp('list-etapes').getSelection()[0].get('id')
                            },
                            callback:function(){
                            }
                        });
                    }
                });

            });
        }


        if(value==Ext.getCmp('panel-formqcm')){

            Ext.getCmp('btn-activiteItems').setText('Enregistrer');
            Ext.getCmp('btn-activiteItems').setUi('confirm');
            me=this;

            Ext.getCmp('btn-activiteItems').setHandler(function(){

                var tab =me.storeToJson(Ext.getStore('ReponsesQcm'));


                Ext.Ajax.request({
                    url: 'proxy.php?proxy_url=manager.php',
                    params: {
                        json:JSON.stringify(tab),
                        fn:'ajouterQcm',
                        nom:Ext.getCmp('textfield-nomactiviteqcm').getValue(),
                        question:Ext.getCmp('textfield-questionqcm').getValue(),
                        points:Ext.getCmp('textfield-pointsqcm').getValue(),
                        reponse:Ext.getCmp('textfield-reponseqcm').getValue(),
                        indice:Ext.getCmp('textfield-indiceqcm').getValue(),
                        malus:Ext.getCmp('textfield-malusqcm').getValue(),
                        lat:Ext.getCmp('list-etapes').getSelection()[0].get('lat'),
                        lng:Ext.getCmp('list-etapes').getSelection()[0].get('lng'),
                        etape_id:Ext.getCmp('list-etapes').getSelection()[0].get('id'),
                        type_id:Ext.getCmp('list-choixtypeactivite').getSelection()[0].get('id'),
                        ordre:Ext.getStore('store-activites').getCount()+1
                    },
                    success: function(response){
                        Ext.getCmp('panel-circuits').setActiveItem(Ext.getCmp('panel-detailsetape'));
                        Ext.getStore('store-activites').load({
                            params:{
                                fn:'fetchActivites',
                                etape_id:Ext.getCmp('list-etapes').getSelection()[0].get('id')
                            },
                            callback:function(){
                            }
                        });
                    }
                });

            });
        }

        if(value==Ext.getCmp('panel-formqs')){

            Ext.getCmp('btn-activiteItems').setText('Enregistrer');
            Ext.getCmp('btn-activiteItems').setUi('confirm');

            Ext.getCmp('btn-activiteItems').setHandler(function(){

                Ext.Ajax.request({
                    url: 'proxy.php?proxy_url=manager.php',
                    params: {
                        fn:'ajouterQs',
                        nom:Ext.getCmp('textfield-nomactiviteqs').getValue(),
                        question:Ext.getCmp('textfield-questionqs').getValue(),
                        reponse:Ext.getCmp('textfield-reponseqs').getValue(),
                        points:Ext.getCmp('textfield-pointsqs').getValue(),
                        indice:Ext.getCmp('textfield-indiceqs').getValue(),
                        malus:Ext.getCmp('textfield-malusqs').getValue(),
                        lat:Ext.getCmp('list-etapes').getSelection()[0].get('lat'),
                        lng:Ext.getCmp('list-etapes').getSelection()[0].get('lng'),
                        etape_id:Ext.getCmp('list-etapes').getSelection()[0].get('id'),
                        type_id:Ext.getCmp('list-choixtypeactivite').getSelection()[0].get('id'),
                        ordre:Ext.getStore('store-activites').getCount()+1
                    },
                    success: function(response){
                        Ext.getCmp('panel-circuits').setActiveItem(Ext.getCmp('panel-detailsetape'));
                        Ext.getStore('store-activites').load({
                            params:{
                                fn:'fetchActivites',
                                etape_id:Ext.getCmp('list-etapes').getSelection()[0].get('id')
                            },
                            callback:function(){
                            }
                        });
                    }
                });

            });
        }

        if(value==Ext.getCmp('panel-detailsetape')){

            Ext.getCmp('btn-activiteItems').setText('+');
            Ext.getCmp('btn-activiteItems').setUi('normal');

            Ext.getCmp('btn-activiteItems').setHandler(function(){

                Ext.getCmp('panel-menuetape').showBy(Ext.getCmp('btn-activiteItems'),'tr-bc?');

            });
        }

    },

    modifierReponse: function(dataview, record, options) {
        Ext.getCmp('btn-activiteItems').setText('OK');
        Ext.getCmp('textfield-detailsmodifierreponseqcm').setValue(record.get('reponse'));
        Ext.getCmp('checkbox-detailsmodifierreponsejuste').setChecked(record.get('juste')=='1');

        Ext.getCmp('panel-detailsactivite').setActiveItem(Ext.getCmp('panel-detailsmodifierreponse'));
    },

    creerMarker: function(latlng,map) {
        var current = this;

        // CustomMarker
        function CustomMarker(latlng,  map) {
            this.latlng_ = latlng;

            // Once the LatLng and text are set, add the overlay to the map.  This will
            // trigger a call to panes_changed which should in turn call draw.
            this.setMap(map);
        }

        CustomMarker.prototype = new google.maps.OverlayView();

        CustomMarker.prototype.draw = function() {
            var me = this;

            // Check if the div has been created.
            var div = this.div_;
            if (!div) {
                // Create a overlay text DIV
                div = this.div_ = document.createElement('DIV');
                // Create the DIV representing our CustomMarker
                div.style.border = "none";
                div.style.position = "absolute";
                div.style.paddingLeft = "0px";
                div.style.cursor = 'pointer';

                var img = document.createElement("img");
                img.src = "app/resource/image/marker.png";
                div.appendChild(img);
                google.maps.event.addDomListener(div, "click", function(event) {
                    google.maps.event.trigger(me, "click");
                });

                // Then add the overlay to the DOM
                var panes = this.getPanes();
                panes.overlayImage.appendChild(div);   
            }

            // Position the overlay 
            var point = this.getProjection().fromLatLngToDivPixel(this.latlng_);
            if (point) {
                div.style.left = point.x - ($(div).width() / 2) + 'px';
                div.style.top = point.y - $(div).height() + 'px';
            }

            google.maps.event.trigger(this, "render");
        };

        CustomMarker.prototype.remove = function() {
            // Check if the overlay was on the map and needs to be removed.
            if (this.div_) {
                this.div_.parentNode.removeChild(this.div_);
                this.div_ = null;
            }
        };

        CustomMarker.prototype.getPosition = function() {
            return this.latlng_;
        };

        CustomMarker.prototype.getDOMElement = function() { return this.div_; };
        // END CustomMarker

        var marker = new CustomMarker(latlng, map);

        google.maps.event.addDomListener(marker, "render", function(event) {
            Ext.getCmp('textfield-nometape').setValue('');
            Ext.getCmp('panel-menumarker').hide();
            Ext.getCmp('panel-menumarker').showBy(Ext.get(marker.getDOMElement()));
            Ext.getCmp('panel-menumarker').marker = marker;
        });


    },

    tracerCircuit: function(store,map) {
        Array.prototype.contains = function(obj) {
            var i = this.length;
            while (i--) {
                if (this[i].$a == obj.$a && this[i].ab == obj.ab) {
                    return i;
                }
            }
            return 0;
        };

        me = this ;
        var markers = [];
        var pointsCircuit = [];

        for(var i=0;i<store.getCount();i++){
            var lat =store.getAt(i).get('lat');
            var lng =store.getAt(i).get('lng');
            pointsCircuit.push(new google.maps.LatLng(lat,lng));

            markers[i] = new google.maps.Marker({
                position: new google.maps.LatLng(lat,lng),
                map: map.getMap(),
                draggable: true,
                icon:'app/resource/image/marker.png'
            });
            markers[i].properties=store.getAt(i).data;

            var circuit = new google.maps.Polyline();
            var oldLatLng;
            (function (){
                var marker = markers[i];

                google.maps.event.addListener(marker,'dragstart',function(latlng) {
                    map.circuit.setMap(null);
                    circuit.setMap(null);
                    var indexMarker = pointsCircuit.contains(marker.position);
                    oldLatLng = pointsCircuit[indexMarker];
                });

                google.maps.event.addListener(marker,'dragend',function(latlng) {
                    var properties= marker.properties;
                    me.updateMarker(properties,latlng);
                });

                google.maps.event.addListener(marker,'drag', function(latlng) {
                    map.circuit.setMap(null);
                    circuit.setMap(null);

                    var newLatLng = marker.position;
                    var indexMarker = pointsCircuit.contains(oldLatLng);

                    pointsCircuit[indexMarker] = newLatLng;
                    oldLatLng = newLatLng;

                    circuit = new google.maps.Polyline({
                        options:{
                            path:pointsCircuit,
                            map:map.getMap(),
                            strokeColor:'F00',
                            strokeWeight:'5',
                            strokeOpacity:'0.5'
                        }
                    });

                    map.circuit = circuit;
                });
            })();
        }

        var circuit = new google.maps.Polyline({
            options:{
                path:pointsCircuit,
                map:map.getMap(),
                strokeColor:'F00',
                strokeWeight:'5',
                strokeOpacity:'0.5'
            }
        });

        map.markers = markers;
        map.circuit = circuit;

        this.centrerCircuit(pointsCircuit);
    },

    effacerCircuit: function(map) {
        if(map.circuit){
            map.circuit.setMap(null);
            for(var i=0;i<map.markers.length;i++){
                map.markers[i].setMap(null);
            }
        }
    },

    updateMarker: function(properties,position) {
        me = this;

        Ext.Ajax.request({
            url: 'proxy.php?proxy_url=manager.php',
            params: {
                etape_id: properties.id,
                lng: position.latLng.lng(),
                lat: position.latLng.lat(),
                fn : 'updateEtape'
            },
            success: function(response){
                Ext.getStore('Etapes').load({
                    params:{
                        fn:'fetchEtapes',
                        circuit_id: properties.circuit_id
                    }
                });
            }
        });

    },

    centrerCircuit: function(circuit) {
        if (circuit.length == 0) return;

        var max_lat = 0;
        var min_lat = Math.abs(circuit[0].$a);
        var max_lng = 0;
        var min_lng = Math.abs(circuit[0].ab);

        for (var i = 0; i < circuit.length; i++) {
            var lat = Math.abs(circuit[i].$a);
            var lng = Math.abs(circuit[i].ab);

            if (lat < min_lat) min_lat = lat;
            if (lat > max_lat) max_lat = lat;
            if (lng < min_lng) min_lng = lng;
            if (lng > max_lng) max_lng = lng;
        }

        var mid_lat = min_lat + ((max_lat - min_lat) / 2);
        var mid_lng = min_lng + ((max_lng - min_lng) / 2);

        Ext.getCmp('carte').setMapOptions({center: new google.maps.LatLng(mid_lat, -mid_lng), zoom: 9, disableDoubleClickZoom:true});

        var bounds = Ext.getCmp('carte').getMap().getBounds();
        var visible_lat = bounds.getNorthEast().lat() - bounds.getSouthWest().lat();
        var visible_lng = Math.abs(bounds.getSouthWest().lng()) - Math.abs(bounds.getNorthEast().lng());

        var zoom_lat = Math.floor(visible_lat / (2 * (max_lat - min_lat)));
        var zoom_lng = Math.floor(visible_lng / (2 * (max_lng - min_lng)));
        var zoom = (zoom_lat < zoom_lng ? zoom_lat : zoom_lng);

        if (circuit.length == 1) zoom = 0;
        Ext.getCmp('carte').setMapOptions({center: new google.maps.LatLng(mid_lat, -mid_lng), zoom: 9 + zoom, disableDoubleClickZoom: true});
    }

});